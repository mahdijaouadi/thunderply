from typing import Protocol, Iterable, Optional, List, Any
from datetime import date
from backend.src.domain.models import JobPost
 
class JobPostsRepository(Protocol):
    async def get_job_posts(self) -> List[JobPost]: ...
    async def get_relevance_score(self,job_posts:List[JobPost], top_k: int) -> List[JobPost]: ...
    async def get_cover_letter(self,job_posts:List[JobPost]) -> List[JobPost]: ...
    async def get_latest_results(self) -> List[JobPost]: ...

class Logger(Protocol):
    def debug(self, msg: str, **kv: Any) -> None: ...
    def info(self, msg: str, **kv: Any) -> None: ...
    def warning(self, msg: str, **kv: Any) -> None: ...
    def error(self, msg: str, **kv: Any) -> None: ...
    def exception(self, msg: str, **kv: Any) -> None: ...








class UnitOfWork(Protocol):
    job_posts_repository: "JobPostsRepository"

    async def __aenter__(self) -> "UnitOfWork": ...
    async def __aexit__(self, exc_type, exc, tb) -> None: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...